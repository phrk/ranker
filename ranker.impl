//#include "ranker.h"

//void Ranker::addDoc(uint64_t _id, const std::string &_title, const std::string &_text) {
//	std::vector<uint64_t> cats;
//	addDoc(_id, _title, _text, cats);
//}

template <class CatT, class ObjId, class ObjT>
Ranker<CatT, ObjId, ObjT>::Ranker() {
	
}

template <class CatT, class ObjId, class ObjT>
Ranker<CatT, ObjId, ObjT>::~Ranker() {
	
}

template <class CatT, class ObjId, class ObjT>
void Ranker<CatT, ObjId, ObjT>::addDoc(const Doc<CatT, ObjId, ObjT> &_doc) {
	//Doc doc;
	//doc.categories.insert(0); // any category
	//for (int i = 0; i<_cats.size(); i++)
	//	doc.categories.insert(_cats[i]);
	
	//m_tokenizer.tokenizeText(_id, _text);
	m_index.indexDoc(_doc);
}

template <class CatT, class ObjId, class ObjT>
ObjId Ranker<CatT, ObjId, ObjT>::addDoc(ObjT _obj, const std::string &_title, const std::string &_text, const std::set<CatT> &_categories) {
	
	TextRepr title;
	m_tokenizer.tokenizeText(_title, title);
	TextRepr text;
	m_tokenizer.tokenizeText(_text, text);
	
	ObjId id = m_index.getDocsCount();
	addDoc(Doc<CatT, ObjId, ObjT> (id, _obj, title, text, _categories));
	return id;
}

template <class CatT, class ObjId, class ObjT>
ObjId Ranker<CatT, ObjId, ObjT>::addDoc(ObjT _obj, const std::string &_title, const std::string &_text) {
	
	std::set<CatT> categories;
	TextRepr title;
	m_tokenizer.tokenizeText(_title, title);
	TextRepr text;
	m_tokenizer.tokenizeText(_text, text);
	ObjId id = m_index.getDocsCount();
	addDoc(Doc<CatT, ObjId, ObjT> (id, _obj, title, text, categories));
	return id;
}

template <class CatT, class ObjId, class ObjT>
void Ranker<CatT, ObjId, ObjT>::addDocAsId(ObjId _obj, const std::string &_title, const std::string &_text, const std::set<CatT> &_categories) {
	
	TextRepr title;
	m_tokenizer.tokenizeText(_title, title);
	TextRepr text;
	m_tokenizer.tokenizeText(_text, text);
	
	addDoc(Doc<CatT, ObjId, ObjT> (_obj, _obj, title, text, _categories) );
}

template <class CatT, class ObjId, class ObjT>
void Ranker<CatT, ObjId, ObjT>::addDocAsId(ObjId _obj, const std::string &_title, const std::string &_text) {
	
	std::set<CatT> categories;
	TextRepr title;
	m_tokenizer.tokenizeText(_title, title);
	TextRepr text;
	m_tokenizer.tokenizeText(_text, text);
	
	addDoc(Doc<CatT, ObjId, ObjT> (_obj, _obj, title, text, categories) );
}

template <class CatT, class ObjId, class ObjT>
void Ranker<CatT, ObjId, ObjT>::removeDoc(ObjId _id) {
	
	m_index.removeDoc(_id);
}

template <class CatT, class ObjId, class ObjT>
void Ranker<CatT, ObjId, ObjT>::query(const std::string &_query, //uint64_t _cat, 
						std::vector<ObjT> &_result) const {
	TextRepr query;
	m_tokenizer.tokenizeTextConst(_query, query);
	if (query.size() != 0)
		m_index.query(query, _result);
}

template <class CatT, class ObjId, class ObjT>
void Ranker<CatT, ObjId, ObjT>::query(const std::string &_query, CatT _cat,
									std::vector<ObjT> &_result) const {
	
	TextRepr query;
	m_tokenizer.tokenizeTextConst(_query, query);
	if (query.size() != 0)
		m_index.query(query, _cat, _result);
}
