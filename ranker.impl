//#include "ranker.h"

//void Ranker::addDoc(uint64_t _id, const std::string &_title, const std::string &_text) {
//	std::vector<uint64_t> cats;
//	addDoc(_id, _title, _text, cats);
//}

template <class CatT, class ObjId>
Ranker<CatT, ObjId>::Ranker(TokenizerIfsPtr _tokenizer):
m_tokenizer(_tokenizer) {
	
}

template <class CatT, class ObjId>
Ranker<CatT, ObjId>::~Ranker() {
	
}

template <class CatT, class ObjId>
void Ranker<CatT, ObjId>::addDoc(const Doc<CatT, ObjId> &_doc) {
	//Doc doc;
	//doc.categories.insert(0); // any category
	//for (int i = 0; i<_cats.size(); i++)
	//	doc.categories.insert(_cats[i]);
	
	//m_tokenizer.tokenizeText(_id, _text);
	m_index.indexDoc(_doc);
}

template <class CatT, class ObjId>
void Ranker<CatT, ObjId>::addDoc(const DocInfo<CatT, ObjId> &_docinfo) {
	
	std::set<CatT> categories;
	TextRepr title;
	m_tokenizer->tokenizeText(_docinfo.title, title);
	TextRepr text;
	m_tokenizer->tokenizeText(_docinfo.text, text);
	
	addDoc(Doc<CatT, ObjId> (_docinfo.id, title, text, _docinfo.categories, _docinfo.geo_points));
}

template <class CatT, class ObjId>
ObjId Ranker<CatT, ObjId>::addDoc(ObjId _id, const std::string &_title, const std::string &_text, const std::set<CatT> &_categories) {
	
	TextRepr title;
	m_tokenizer->tokenizeText(_title, title);
	TextRepr text;
	m_tokenizer->tokenizeText(_text, text);
	
	//ObjId id = m_index.getDocsCount();
	addDoc(Doc<CatT, ObjId> (_id, title, text, _categories, std::vector<Point>()));
	return _id;
}

template <class CatT, class ObjId>
ObjId Ranker<CatT, ObjId>::addDoc(ObjId _id, const std::string &_title, const std::string &_text) {
	
	std::set<CatT> categories;
	TextRepr title;
	m_tokenizer->tokenizeText(_title, title);
	TextRepr text;
	m_tokenizer->tokenizeText(_text, text);
	//ObjId id = m_index.getDocsCount();
	addDoc(Doc<CatT, ObjId> (_id, title, text, categories, std::vector<Point>()));
	return _id;
}


template <class CatT, class ObjId>
void Ranker<CatT, ObjId>::removeDoc(ObjId _id) {
	
	m_index.removeDoc(_id);
}

template <class CatT, class ObjId>
void Ranker<CatT, ObjId>::query(const std::string &_query, //uint64_t _cat, 
						std::vector<ObjId> &_result) const {
	TextRepr query;
	m_tokenizer->tokenizeTextConst(_query, query);
	if (query.size() != 0)
		m_index.query(query, _result);
}

template <class CatT, class ObjId>
void Ranker<CatT, ObjId>::query(const std::string &_query, CatT _cat,
									std::vector<ObjId> &_result) const {
	
	TextRepr query;
	m_tokenizer->tokenizeTextConst(_query, query);
	if (query.size() != 0)
		m_index.query(query, _cat, _result);
}
