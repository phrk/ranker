
template <class ObjId>
Occur<ObjId>::Occur(ObjId _docid):
	docid (_docid) {
	
}

template <class ObjId>
Occurs<ObjId>::~Occurs() {
	
}

template <class ObjId>
bool cmpOccur (const Occur<ObjId> &_a, const Occur<ObjId> &_b) {
	return _a.docid < _b.docid;
}

template <class ObjId>
Occurs<ObjId>::Occurs()
{
}

template <class ObjId>
int Occurs<ObjId>::size() const {
	
	return m_occurs.size();
}

template <class ObjId>
void Occurs<ObjId>::add(Occur<ObjId> &_occur) {

#warning Leaving only one occurance in doc
	for (int i = 0; i<m_occurs.size(); i++)
		if (m_occurs[i].docid == _occur.docid)
			return;

	m_occurs.push_back(_occur);
	std::sort(m_occurs.begin(), m_occurs.end(), cmpOccur<ObjId>);
}

template <class ObjId>
void Occurs<ObjId>::getDocIds(std::vector<ObjId> &_docids) {

	for (int i = 0; i<m_occurs.size(); i++)
		_docids.push_back( m_occurs[i].docid );
}

template <class ObjId>
void Occurs<ObjId>::intersect(const Occurs<ObjId> &_a, const Occurs<ObjId> &_b, Occurs<ObjId> &_res) {
	
	int a_pos = 0;
	int b_pos = 0;
	Occurs<ObjId> res;

	while (1) {
		
		if (a_pos >= _a.m_occurs.size())
			break;
		
		if (b_pos >= _b.m_occurs.size())
			break;
				
		if ( _a.m_occurs[a_pos].docid == _b.m_occurs[b_pos].docid ) {
			
			res.m_occurs.push_back(  _a.m_occurs[a_pos] );
			a_pos++;
			b_pos++;
		}
		else if ( _a.m_occurs[a_pos].docid < _b.m_occurs[b_pos].docid)
			a_pos++;
		else
			b_pos++;
	}
	_res = res;
}

template <class ObjId>
void Occurs<ObjId>::removeOccurance(ObjId _docid) {
	
	typename OccursVec::iterator it = m_occurs.begin();
	typename OccursVec::iterator end = m_occurs.end();
	
	while (it != end) {
		if (it->docid == _docid) {
			m_occurs.erase(it);
			break;
		}
		it++;
	}
}
